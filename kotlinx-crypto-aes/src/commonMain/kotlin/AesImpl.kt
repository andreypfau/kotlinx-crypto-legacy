package io.github.andreypfau.kotlinx.crypto.aes

import io.github.andreypfau.kotlinx.encoding.binary.Binary.loadIntAt
import io.github.andreypfau.kotlinx.encoding.binary.Binary.storeIntAt


// Powers of x mod poly in GF(2).
private val POWX = byteArrayOf(
    0x01,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x40,
    0x80.toByte(),
    0x1B,
    0x36,
    0x6C,
    0xD8.toByte(),
    0xAB.toByte(),
    0x4D,
    0x9A.toByte(),
    0x2F,
)

private val SBOX0 = ubyteArrayOf(
    0x63u, 0x7cu, 0x77u, 0x7bu, 0xf2u, 0x6bu, 0x6fu, 0xc5u, 0x30u, 0x01u, 0x67u, 0x2bu, 0xfeu, 0xd7u, 0xabu, 0x76u,
    0xcau, 0x82u, 0xc9u, 0x7du, 0xfau, 0x59u, 0x47u, 0xf0u, 0xadu, 0xd4u, 0xa2u, 0xafu, 0x9cu, 0xa4u, 0x72u, 0xc0u,
    0xb7u, 0xfdu, 0x93u, 0x26u, 0x36u, 0x3fu, 0xf7u, 0xccu, 0x34u, 0xa5u, 0xe5u, 0xf1u, 0x71u, 0xd8u, 0x31u, 0x15u,
    0x04u, 0xc7u, 0x23u, 0xc3u, 0x18u, 0x96u, 0x05u, 0x9au, 0x07u, 0x12u, 0x80u, 0xe2u, 0xebu, 0x27u, 0xb2u, 0x75u,
    0x09u, 0x83u, 0x2cu, 0x1au, 0x1bu, 0x6eu, 0x5au, 0xa0u, 0x52u, 0x3bu, 0xd6u, 0xb3u, 0x29u, 0xe3u, 0x2fu, 0x84u,
    0x53u, 0xd1u, 0x00u, 0xedu, 0x20u, 0xfcu, 0xb1u, 0x5bu, 0x6au, 0xcbu, 0xbeu, 0x39u, 0x4au, 0x4cu, 0x58u, 0xcfu,
    0xd0u, 0xefu, 0xaau, 0xfbu, 0x43u, 0x4du, 0x33u, 0x85u, 0x45u, 0xf9u, 0x02u, 0x7fu, 0x50u, 0x3cu, 0x9fu, 0xa8u,
    0x51u, 0xa3u, 0x40u, 0x8fu, 0x92u, 0x9du, 0x38u, 0xf5u, 0xbcu, 0xb6u, 0xdau, 0x21u, 0x10u, 0xffu, 0xf3u, 0xd2u,
    0xcdu, 0x0cu, 0x13u, 0xecu, 0x5fu, 0x97u, 0x44u, 0x17u, 0xc4u, 0xa7u, 0x7eu, 0x3du, 0x64u, 0x5du, 0x19u, 0x73u,
    0x60u, 0x81u, 0x4fu, 0xdcu, 0x22u, 0x2au, 0x90u, 0x88u, 0x46u, 0xeeu, 0xb8u, 0x14u, 0xdeu, 0x5eu, 0x0bu, 0xdbu,
    0xe0u, 0x32u, 0x3au, 0x0au, 0x49u, 0x06u, 0x24u, 0x5cu, 0xc2u, 0xd3u, 0xacu, 0x62u, 0x91u, 0x95u, 0xe4u, 0x79u,
    0xe7u, 0xc8u, 0x37u, 0x6du, 0x8du, 0xd5u, 0x4eu, 0xa9u, 0x6cu, 0x56u, 0xf4u, 0xeau, 0x65u, 0x7au, 0xaeu, 0x08u,
    0xbau, 0x78u, 0x25u, 0x2eu, 0x1cu, 0xa6u, 0xb4u, 0xc6u, 0xe8u, 0xddu, 0x74u, 0x1fu, 0x4bu, 0xbdu, 0x8bu, 0x8au,
    0x70u, 0x3eu, 0xb5u, 0x66u, 0x48u, 0x03u, 0xf6u, 0x0eu, 0x61u, 0x35u, 0x57u, 0xb9u, 0x86u, 0xc1u, 0x1du, 0x9eu,
    0xe1u, 0xf8u, 0x98u, 0x11u, 0x69u, 0xd9u, 0x8eu, 0x94u, 0x9bu, 0x1eu, 0x87u, 0xe9u, 0xceu, 0x55u, 0x28u, 0xdfu,
    0x8cu, 0xa1u, 0x89u, 0x0du, 0xbfu, 0xe6u, 0x42u, 0x68u, 0x41u, 0x99u, 0x2du, 0x0fu, 0xb0u, 0x54u, 0xbbu, 0x16u,
).asByteArray()

private val TD0 = uintArrayOf(
    0x51F4A750u, 0x7E416553u, 0x1A17A4C3u, 0x3A275E96u, 0x3BAB6BCBu, 0x1F9D45F1u, 0xACFA58ABu, 0x4BE30393u,
    0x2030FA55u, 0xAD766DF6u, 0x88CC7691u, 0xF5024C25u, 0x4FE5D7FCu, 0xC52ACBD7u, 0x26354480u, 0xB562A38Fu,
    0xDEB15A49u, 0x25BA1B67u, 0x45EA0E98u, 0x5DFEC0E1u, 0xC32F7502u, 0x814CF012u, 0x8D4697A3u, 0x6BD3F9C6u,
    0x038F5FE7u, 0x15929C95u, 0xBF6D7AEBu, 0x955259DAu, 0xD4BE832Du, 0x587421D3u, 0x49E06929u, 0x8EC9C844u,
    0x75C2896Au, 0xF48E7978u, 0x99583E6Bu, 0x27B971DDu, 0xBEE14FB6u, 0xF088AD17u, 0xC920AC66u, 0x7DCE3AB4u,
    0x63DF4A18u, 0xE51A3182u, 0x97513360u, 0x62537F45u, 0xB16477E0u, 0xBB6BAE84u, 0xFE81A01Cu, 0xF9082B94u,
    0x70486858u, 0x8F45FD19u, 0x94DE6C87u, 0x527BF8B7u, 0xAB73D323u, 0x724B02E2u, 0xE31F8F57u, 0x6655AB2Au,
    0xB2EB2807u, 0x2FB5C203u, 0x86C57B9Au, 0xD33708A5u, 0x302887F2u, 0x23BFA5B2u, 0x02036ABAu, 0xED16825Cu,
    0x8ACF1C2Bu, 0xA779B492u, 0xF307F2F0u, 0x4E69E2A1u, 0x65DAF4CDu, 0x0605BED5u, 0xD134621Fu, 0xC4A6FE8Au,
    0x342E539Du, 0xA2F355A0u, 0x058AE132u, 0xA4F6EB75u, 0x0B83EC39u, 0x4060EFAAu, 0x5E719F06u, 0xBD6E1051u,
    0x3E218AF9u, 0x96DD063Du, 0xDD3E05AEu, 0x4DE6BD46u, 0x91548DB5u, 0x71C45D05u, 0x0406D46Fu, 0x605015FFu,
    0x1998FB24u, 0xD6BDE997u, 0x894043CCu, 0x67D99E77u, 0xB0E842BDu, 0x07898B88u, 0xE7195B38u, 0x79C8EEDBu,
    0xA17C0A47u, 0x7C420FE9u, 0xF8841EC9u, 0x00000000u, 0x09808683u, 0x322BED48u, 0x1E1170ACu, 0x6C5A724Eu,
    0xFD0EFFFBu, 0x0F853856u, 0x3DAED51Eu, 0x362D3927u, 0x0A0FD964u, 0x685CA621u, 0x9B5B54D1u, 0x24362E3Au,
    0x0C0A67B1u, 0x9357E70Fu, 0xB4EE96D2u, 0x1B9B919Eu, 0x80C0C54Fu, 0x61DC20A2u, 0x5A774B69u, 0x1C121A16u,
    0xE293BA0Au, 0xC0A02AE5u, 0x3C22E043u, 0x121B171Du, 0x0E090D0Bu, 0xF28BC7ADu, 0x2DB6A8B9u, 0x141EA9C8u,
    0x57F11985u, 0xAF75074Cu, 0xEE99DDBBu, 0xA37F60FDu, 0xF701269Fu, 0x5C72F5BCu, 0x44663BC5u, 0x5BFB7E34u,
    0x8B432976u, 0xCB23C6DCu, 0xB6EDFC68u, 0xB8E4F163u, 0xD731DCCAu, 0x42638510u, 0x13972240u, 0x84C61120u,
    0x854A247Du, 0xD2BB3DF8u, 0xAEF93211u, 0xC729A16Du, 0x1D9E2F4Bu, 0xDCB230F3u, 0x0D8652ECu, 0x77C1E3D0u,
    0x2BB3166Cu, 0xA970B999u, 0x119448FAu, 0x47E96422u, 0xA8FC8CC4u, 0xA0F03F1Au, 0x567D2CD8u, 0x223390EFu,
    0x87494EC7u, 0xD938D1C1u, 0x8CCAA2FEu, 0x98D40B36u, 0xA6F581CFu, 0xA57ADE28u, 0xDAB78E26u, 0x3FADBFA4u,
    0x2C3A9DE4u, 0x5078920Du, 0x6A5FCC9Bu, 0x547E4662u, 0xF68D13C2u, 0x90D8B8E8u, 0x2E39F75Eu, 0x82C3AFF5u,
    0x9F5D80BEu, 0x69D0937Cu, 0x6FD52DA9u, 0xCF2512B3u, 0xC8AC993Bu, 0x10187DA7u, 0xE89C636Eu, 0xDB3BBB7Bu,
    0xCD267809u, 0x6E5918F4u, 0xEC9AB701u, 0x834F9AA8u, 0xE6956E65u, 0xAAFFE67Eu, 0x21BCCF08u, 0xEF15E8E6u,
    0xBAE79BD9u, 0x4A6F36CEu, 0xEA9F09D4u, 0x29B07CD6u, 0x31A4B2AFu, 0x2A3F2331u, 0xC6A59430u, 0x35A266C0u,
    0x744EBC37u, 0xFC82CAA6u, 0xE090D0B0u, 0x33A7D815u, 0xF104984Au, 0x41ECDAF7u, 0x7FCD500Eu, 0x1791F62Fu,
    0x764DD68Du, 0x43EFB04Du, 0xCCAA4D54u, 0xE49604DFu, 0x9ED1B5E3u, 0x4C6A881Bu, 0xC12C1FB8u, 0x4665517Fu,
    0x9D5EEA04u, 0x018C355Du, 0xFA877473u, 0xFB0B412Eu, 0xB3671D5Au, 0x92DBD252u, 0xE9105633u, 0x6DD64713u,
    0x9AD7618Cu, 0x37A10C7Au, 0x59F8148Eu, 0xEB133C89u, 0xCEA927EEu, 0xB761C935u, 0xE11CE5EDu, 0x7A47B13Cu,
    0x9CD2DF59u, 0x55F2733Fu, 0x1814CE79u, 0x73C737BFu, 0x53F7CDEAu, 0x5FFDAA5Bu, 0xDF3D6F14u, 0x7844DB86u,
    0xCAAFF381u, 0xB968C43Eu, 0x3824342Cu, 0xC2A3405Fu, 0x161DC372u, 0xBCE2250Cu, 0x283C498Bu, 0xFF0D9541u,
    0x39A80171u, 0x080CB3DEu, 0xD8B4E49Cu, 0x6456C190u, 0x7BCB8461u, 0xD532B670u, 0x486C5C74u, 0xD0B85742u,
).asIntArray()

private val TD1 = uintArrayOf(
    0x5051F4A7u, 0x537E4165u, 0xC31A17A4u, 0x963A275Eu, 0xCB3BAB6Bu, 0xF11F9D45u, 0xABACFA58u, 0x934BE303u,
    0x552030FAu, 0xF6AD766Du, 0x9188CC76u, 0x25F5024Cu, 0xFC4FE5D7u, 0xD7C52ACBu, 0x80263544u, 0x8FB562A3u,
    0x49DEB15Au, 0x6725BA1Bu, 0x9845EA0Eu, 0xE15DFEC0u, 0x02C32F75u, 0x12814CF0u, 0xA38D4697u, 0xC66BD3F9u,
    0xE7038F5Fu, 0x9515929Cu, 0xEBBF6D7Au, 0xDA955259u, 0x2DD4BE83u, 0xD3587421u, 0x2949E069u, 0x448EC9C8u,
    0x6A75C289u, 0x78F48E79u, 0x6B99583Eu, 0xDD27B971u, 0xB6BEE14Fu, 0x17F088ADu, 0x66C920ACu, 0xB47DCE3Au,
    0x1863DF4Au, 0x82E51A31u, 0x60975133u, 0x4562537Fu, 0xE0B16477u, 0x84BB6BAEu, 0x1CFE81A0u, 0x94F9082Bu,
    0x58704868u, 0x198F45FDu, 0x8794DE6Cu, 0xB7527BF8u, 0x23AB73D3u, 0xE2724B02u, 0x57E31F8Fu, 0x2A6655ABu,
    0x07B2EB28u, 0x032FB5C2u, 0x9A86C57Bu, 0xA5D33708u, 0xF2302887u, 0xB223BFA5u, 0xBA02036Au, 0x5CED1682u,
    0x2B8ACF1Cu, 0x92A779B4u, 0xF0F307F2u, 0xA14E69E2u, 0xCD65DAF4u, 0xD50605BEu, 0x1FD13462u, 0x8AC4A6FEu,
    0x9D342E53u, 0xA0A2F355u, 0x32058AE1u, 0x75A4F6EBu, 0x390B83ECu, 0xAA4060EFu, 0x065E719Fu, 0x51BD6E10u,
    0xF93E218Au, 0x3D96DD06u, 0xAEDD3E05u, 0x464DE6BDu, 0xB591548Du, 0x0571C45Du, 0x6F0406D4u, 0xFF605015u,
    0x241998FBu, 0x97D6BDE9u, 0xCC894043u, 0x7767D99Eu, 0xBDB0E842u, 0x8807898Bu, 0x38E7195Bu, 0xDB79C8EEu,
    0x47A17C0Au, 0xE97C420Fu, 0xC9F8841Eu, 0x00000000u, 0x83098086u, 0x48322BEDu, 0xAC1E1170u, 0x4E6C5A72u,
    0xFBFD0EFFu, 0x560F8538u, 0x1E3DAED5u, 0x27362D39u, 0x640A0FD9u, 0x21685CA6u, 0xD19B5B54u, 0x3A24362Eu,
    0xB10C0A67u, 0x0F9357E7u, 0xD2B4EE96u, 0x9E1B9B91u, 0x4F80C0C5u, 0xA261DC20u, 0x695A774Bu, 0x161C121Au,
    0x0AE293BAu, 0xE5C0A02Au, 0x433C22E0u, 0x1D121B17u, 0x0B0E090Du, 0xADF28BC7u, 0xB92DB6A8u, 0xC8141EA9u,
    0x8557F119u, 0x4CAF7507u, 0xBBEE99DDu, 0xFDA37F60u, 0x9FF70126u, 0xBC5C72F5u, 0xC544663Bu, 0x345BFB7Eu,
    0x768B4329u, 0xDCCB23C6u, 0x68B6EDFCu, 0x63B8E4F1u, 0xCAD731DCu, 0x10426385u, 0x40139722u, 0x2084C611u,
    0x7D854A24u, 0xF8D2BB3Du, 0x11AEF932u, 0x6DC729A1u, 0x4B1D9E2Fu, 0xF3DCB230u, 0xEC0D8652u, 0xD077C1E3u,
    0x6C2BB316u, 0x99A970B9u, 0xFA119448u, 0x2247E964u, 0xC4A8FC8Cu, 0x1AA0F03Fu, 0xD8567D2Cu, 0xEF223390u,
    0xC787494Eu, 0xC1D938D1u, 0xFE8CCAA2u, 0x3698D40Bu, 0xCFA6F581u, 0x28A57ADEu, 0x26DAB78Eu, 0xA43FADBFu,
    0xE42C3A9Du, 0x0D507892u, 0x9B6A5FCCu, 0x62547E46u, 0xC2F68D13u, 0xE890D8B8u, 0x5E2E39F7u, 0xF582C3AFu,
    0xBE9F5D80u, 0x7C69D093u, 0xA96FD52Du, 0xB3CF2512u, 0x3BC8AC99u, 0xA710187Du, 0x6EE89C63u, 0x7BDB3BBBu,
    0x09CD2678u, 0xF46E5918u, 0x01EC9AB7u, 0xA8834F9Au, 0x65E6956Eu, 0x7EAAFFE6u, 0x0821BCCFu, 0xE6EF15E8u,
    0xD9BAE79Bu, 0xCE4A6F36u, 0xD4EA9F09u, 0xD629B07Cu, 0xAF31A4B2u, 0x312A3F23u, 0x30C6A594u, 0xC035A266u,
    0x37744EBCu, 0xA6FC82CAu, 0xB0E090D0u, 0x1533A7D8u, 0x4AF10498u, 0xF741ECDAu, 0x0E7FCD50u, 0x2F1791F6u,
    0x8D764DD6u, 0x4D43EFB0u, 0x54CCAA4Du, 0xDFE49604u, 0xE39ED1B5u, 0x1B4C6A88u, 0xB8C12C1Fu, 0x7F466551u,
    0x049D5EEAu, 0x5D018C35u, 0x73FA8774u, 0x2EFB0B41u, 0x5AB3671Du, 0x5292DBD2u, 0x33E91056u, 0x136DD647u,
    0x8C9AD761u, 0x7A37A10Cu, 0x8E59F814u, 0x89EB133Cu, 0xEECEA927u, 0x35B761C9u, 0xEDE11CE5u, 0x3C7A47B1u,
    0x599CD2DFu, 0x3F55F273u, 0x791814CEu, 0xBF73C737u, 0xEA53F7CDu, 0x5B5FFDAAu, 0x14DF3D6Fu, 0x867844DBu,
    0x81CAAFF3u, 0x3EB968C4u, 0x2C382434u, 0x5FC2A340u, 0x72161DC3u, 0x0CBCE225u, 0x8B283C49u, 0x41FF0D95u,
    0x7139A801u, 0xDE080CB3u, 0x9CD8B4E4u, 0x906456C1u, 0x617BCB84u, 0x70D532B6u, 0x74486C5Cu, 0x42D0B857u,
).asIntArray()

private val TD2 = uintArrayOf(
    0xA75051F4u, 0x65537E41u, 0xA4C31A17u, 0x5E963A27u, 0x6BCB3BABu, 0x45F11F9Du, 0x58ABACFAu, 0x03934BE3u,
    0xFA552030u, 0x6DF6AD76u, 0x769188CCu, 0x4C25F502u, 0xD7FC4FE5u, 0xCBD7C52Au, 0x44802635u, 0xA38FB562u,
    0x5A49DEB1u, 0x1B6725BAu, 0x0E9845EAu, 0xC0E15DFEu, 0x7502C32Fu, 0xF012814Cu, 0x97A38D46u, 0xF9C66BD3u,
    0x5FE7038Fu, 0x9C951592u, 0x7AEBBF6Du, 0x59DA9552u, 0x832DD4BEu, 0x21D35874u, 0x692949E0u, 0xC8448EC9u,
    0x896A75C2u, 0x7978F48Eu, 0x3E6B9958u, 0x71DD27B9u, 0x4FB6BEE1u, 0xAD17F088u, 0xAC66C920u, 0x3AB47DCEu,
    0x4A1863DFu, 0x3182E51Au, 0x33609751u, 0x7F456253u, 0x77E0B164u, 0xAE84BB6Bu, 0xA01CFE81u, 0x2B94F908u,
    0x68587048u, 0xFD198F45u, 0x6C8794DEu, 0xF8B7527Bu, 0xD323AB73u, 0x02E2724Bu, 0x8F57E31Fu, 0xAB2A6655u,
    0x2807B2EBu, 0xC2032FB5u, 0x7B9A86C5u, 0x08A5D337u, 0x87F23028u, 0xA5B223BFu, 0x6ABA0203u, 0x825CED16u,
    0x1C2B8ACFu, 0xB492A779u, 0xF2F0F307u, 0xE2A14E69u, 0xF4CD65DAu, 0xBED50605u, 0x621FD134u, 0xFE8AC4A6u,
    0x539D342Eu, 0x55A0A2F3u, 0xE132058Au, 0xEB75A4F6u, 0xEC390B83u, 0xEFAA4060u, 0x9F065E71u, 0x1051BD6Eu,
    0x8AF93E21u, 0x063D96DDu, 0x05AEDD3Eu, 0xBD464DE6u, 0x8DB59154u, 0x5D0571C4u, 0xD46F0406u, 0x15FF6050u,
    0xFB241998u, 0xE997D6BDu, 0x43CC8940u, 0x9E7767D9u, 0x42BDB0E8u, 0x8B880789u, 0x5B38E719u, 0xEEDB79C8u,
    0x0A47A17Cu, 0x0FE97C42u, 0x1EC9F884u, 0x00000000u, 0x86830980u, 0xED48322Bu, 0x70AC1E11u, 0x724E6C5Au,
    0xFFFBFD0Eu, 0x38560F85u, 0xD51E3DAEu, 0x3927362Du, 0xD9640A0Fu, 0xA621685Cu, 0x54D19B5Bu, 0x2E3A2436u,
    0x67B10C0Au, 0xE70F9357u, 0x96D2B4EEu, 0x919E1B9Bu, 0xC54F80C0u, 0x20A261DCu, 0x4B695A77u, 0x1A161C12u,
    0xBA0AE293u, 0x2AE5C0A0u, 0xE0433C22u, 0x171D121Bu, 0x0D0B0E09u, 0xC7ADF28Bu, 0xA8B92DB6u, 0xA9C8141Eu,
    0x198557F1u, 0x074CAF75u, 0xDDBBEE99u, 0x60FDA37Fu, 0x269FF701u, 0xF5BC5C72u, 0x3BC54466u, 0x7E345BFBu,
    0x29768B43u, 0xC6DCCB23u, 0xFC68B6EDu, 0xF163B8E4u, 0xDCCAD731u, 0x85104263u, 0x22401397u, 0x112084C6u,
    0x247D854Au, 0x3DF8D2BBu, 0x3211AEF9u, 0xA16DC729u, 0x2F4B1D9Eu, 0x30F3DCB2u, 0x52EC0D86u, 0xE3D077C1u,
    0x166C2BB3u, 0xB999A970u, 0x48FA1194u, 0x642247E9u, 0x8CC4A8FCu, 0x3F1AA0F0u, 0x2CD8567Du, 0x90EF2233u,
    0x4EC78749u, 0xD1C1D938u, 0xA2FE8CCAu, 0x0B3698D4u, 0x81CFA6F5u, 0xDE28A57Au, 0x8E26DAB7u, 0xBFA43FADu,
    0x9DE42C3Au, 0x920D5078u, 0xCC9B6A5Fu, 0x4662547Eu, 0x13C2F68Du, 0xB8E890D8u, 0xF75E2E39u, 0xAFF582C3u,
    0x80BE9F5Du, 0x937C69D0u, 0x2DA96FD5u, 0x12B3CF25u, 0x993BC8ACu, 0x7DA71018u, 0x636EE89Cu, 0xBB7BDB3Bu,
    0x7809CD26u, 0x18F46E59u, 0xB701EC9Au, 0x9AA8834Fu, 0x6E65E695u, 0xE67EAAFFu, 0xCF0821BCu, 0xE8E6EF15u,
    0x9BD9BAE7u, 0x36CE4A6Fu, 0x09D4EA9Fu, 0x7CD629B0u, 0xB2AF31A4u, 0x23312A3Fu, 0x9430C6A5u, 0x66C035A2u,
    0xBC37744Eu, 0xCAA6FC82u, 0xD0B0E090u, 0xD81533A7u, 0x984AF104u, 0xDAF741ECu, 0x500E7FCDu, 0xF62F1791u,
    0xD68D764Du, 0xB04D43EFu, 0x4D54CCAAu, 0x04DFE496u, 0xB5E39ED1u, 0x881B4C6Au, 0x1FB8C12Cu, 0x517F4665u,
    0xEA049D5Eu, 0x355D018Cu, 0x7473FA87u, 0x412EFB0Bu, 0x1D5AB367u, 0xD25292DBu, 0x5633E910u, 0x47136DD6u,
    0x618C9AD7u, 0x0C7A37A1u, 0x148E59F8u, 0x3C89EB13u, 0x27EECEA9u, 0xC935B761u, 0xE5EDE11Cu, 0xB13C7A47u,
    0xDF599CD2u, 0x733F55F2u, 0xCE791814u, 0x37BF73C7u, 0xCDEA53F7u, 0xAA5B5FFDu, 0x6F14DF3Du, 0xDB867844u,
    0xF381CAAFu, 0xC43EB968u, 0x342C3824u, 0x405FC2A3u, 0xC372161Du, 0x250CBCE2u, 0x498B283Cu, 0x9541FF0Du,
    0x017139A8u, 0xB3DE080Cu, 0xE49CD8B4u, 0xC1906456u, 0x84617BCBu, 0xB670D532u, 0x5C74486Cu, 0x5742D0B8u,
).asIntArray()

private val TD3 = uintArrayOf(
    0xF4A75051u, 0x4165537Eu, 0x17A4C31Au, 0x275E963Au, 0xAB6BCB3Bu, 0x9D45F11Fu, 0xFA58ABACu, 0xE303934Bu,
    0x30FA5520u, 0x766DF6ADu, 0xCC769188u, 0x024C25F5u, 0xE5D7FC4Fu, 0x2ACBD7C5u, 0x35448026u, 0x62A38FB5u,
    0xB15A49DEu, 0xBA1B6725u, 0xEA0E9845u, 0xFEC0E15Du, 0x2F7502C3u, 0x4CF01281u, 0x4697A38Du, 0xD3F9C66Bu,
    0x8F5FE703u, 0x929C9515u, 0x6D7AEBBFu, 0x5259DA95u, 0xBE832DD4u, 0x7421D358u, 0xE0692949u, 0xC9C8448Eu,
    0xC2896A75u, 0x8E7978F4u, 0x583E6B99u, 0xB971DD27u, 0xE14FB6BEu, 0x88AD17F0u, 0x20AC66C9u, 0xCE3AB47Du,
    0xDF4A1863u, 0x1A3182E5u, 0x51336097u, 0x537F4562u, 0x6477E0B1u, 0x6BAE84BBu, 0x81A01CFEu, 0x082B94F9u,
    0x48685870u, 0x45FD198Fu, 0xDE6C8794u, 0x7BF8B752u, 0x73D323ABu, 0x4B02E272u, 0x1F8F57E3u, 0x55AB2A66u,
    0xEB2807B2u, 0xB5C2032Fu, 0xC57B9A86u, 0x3708A5D3u, 0x2887F230u, 0xBFA5B223u, 0x036ABA02u, 0x16825CEDu,
    0xCF1C2B8Au, 0x79B492A7u, 0x07F2F0F3u, 0x69E2A14Eu, 0xDAF4CD65u, 0x05BED506u, 0x34621FD1u, 0xA6FE8AC4u,
    0x2E539D34u, 0xF355A0A2u, 0x8AE13205u, 0xF6EB75A4u, 0x83EC390Bu, 0x60EFAA40u, 0x719F065Eu, 0x6E1051BDu,
    0x218AF93Eu, 0xDD063D96u, 0x3E05AEDDu, 0xE6BD464Du, 0x548DB591u, 0xC45D0571u, 0x06D46F04u, 0x5015FF60u,
    0x98FB2419u, 0xBDE997D6u, 0x4043CC89u, 0xD99E7767u, 0xE842BDB0u, 0x898B8807u, 0x195B38E7u, 0xC8EEDB79u,
    0x7C0A47A1u, 0x420FE97Cu, 0x841EC9F8u, 0x00000000u, 0x80868309u, 0x2BED4832u, 0x1170AC1Eu, 0x5A724E6Cu,
    0x0EFFFBFDu, 0x8538560Fu, 0xAED51E3Du, 0x2D392736u, 0x0FD9640Au, 0x5CA62168u, 0x5B54D19Bu, 0x362E3A24u,
    0x0A67B10Cu, 0x57E70F93u, 0xEE96D2B4u, 0x9B919E1Bu, 0xC0C54F80u, 0xDC20A261u, 0x774B695Au, 0x121A161Cu,
    0x93BA0AE2u, 0xA02AE5C0u, 0x22E0433Cu, 0x1B171D12u, 0x090D0B0Eu, 0x8BC7ADF2u, 0xB6A8B92Du, 0x1EA9C814u,
    0xF1198557u, 0x75074CAFu, 0x99DDBBEEu, 0x7F60FDA3u, 0x01269FF7u, 0x72F5BC5Cu, 0x663BC544u, 0xFB7E345Bu,
    0x4329768Bu, 0x23C6DCCBu, 0xEDFC68B6u, 0xE4F163B8u, 0x31DCCAD7u, 0x63851042u, 0x97224013u, 0xC6112084u,
    0x4A247D85u, 0xBB3DF8D2u, 0xF93211AEu, 0x29A16DC7u, 0x9E2F4B1Du, 0xB230F3DCu, 0x8652EC0Du, 0xC1E3D077u,
    0xB3166C2Bu, 0x70B999A9u, 0x9448FA11u, 0xE9642247u, 0xFC8CC4A8u, 0xF03F1AA0u, 0x7D2CD856u, 0x3390EF22u,
    0x494EC787u, 0x38D1C1D9u, 0xCAA2FE8Cu, 0xD40B3698u, 0xF581CFA6u, 0x7ADE28A5u, 0xB78E26DAu, 0xADBFA43Fu,
    0x3A9DE42Cu, 0x78920D50u, 0x5FCC9B6Au, 0x7E466254u, 0x8D13C2F6u, 0xD8B8E890u, 0x39F75E2Eu, 0xC3AFF582u,
    0x5D80BE9Fu, 0xD0937C69u, 0xD52DA96Fu, 0x2512B3CFu, 0xAC993BC8u, 0x187DA710u, 0x9C636EE8u, 0x3BBB7BDBu,
    0x267809CDu, 0x5918F46Eu, 0x9AB701ECu, 0x4F9AA883u, 0x956E65E6u, 0xFFE67EAAu, 0xBCCF0821u, 0x15E8E6EFu,
    0xE79BD9BAu, 0x6F36CE4Au, 0x9F09D4EAu, 0xB07CD629u, 0xA4B2AF31u, 0x3F23312Au, 0xA59430C6u, 0xA266C035u,
    0x4EBC3774u, 0x82CAA6FCu, 0x90D0B0E0u, 0xA7D81533u, 0x04984AF1u, 0xECDAF741u, 0xCD500E7Fu, 0x91F62F17u,
    0x4DD68D76u, 0xEFB04D43u, 0xAA4D54CCu, 0x9604DFE4u, 0xD1B5E39Eu, 0x6A881B4Cu, 0x2C1FB8C1u, 0x65517F46u,
    0x5EEA049Du, 0x8C355D01u, 0x877473FAu, 0x0B412EFBu, 0x671D5AB3u, 0xDBD25292u, 0x105633E9u, 0xD647136Du,
    0xD7618C9Au, 0xA10C7A37u, 0xF8148E59u, 0x133C89EBu, 0xA927EECEu, 0x61C935B7u, 0x1CE5EDE1u, 0x47B13C7Au,
    0xD2DF599Cu, 0xF2733F55u, 0x14CE7918u, 0xC737BF73u, 0xF7CDEA53u, 0xFDAA5B5Fu, 0x3D6F14DFu, 0x44DB8678u,
    0xAFF381CAu, 0x68C43EB9u, 0x24342C38u, 0xA3405FC2u, 0x1DC37216u, 0xE2250CBCu, 0x3C498B28u, 0x0D9541FFu,
    0xA8017139u, 0x0CB3DE08u, 0xB4E49CD8u, 0x56C19064u, 0xCB84617Bu, 0x32B670D5u, 0x6C5C7448u, 0xB85742D0u,
).asIntArray()

private val te0 = uintArrayOf(
    0xc66363a5u, 0xf87c7c84u, 0xee777799u, 0xf67b7b8du, 0xfff2f20du, 0xd66b6bbdu, 0xde6f6fb1u, 0x91c5c554u,
    0x60303050u, 0x02010103u, 0xce6767a9u, 0x562b2b7du, 0xe7fefe19u, 0xb5d7d762u, 0x4dababe6u, 0xec76769au,
    0x8fcaca45u, 0x1f82829du, 0x89c9c940u, 0xfa7d7d87u, 0xeffafa15u, 0xb25959ebu, 0x8e4747c9u, 0xfbf0f00bu,
    0x41adadecu, 0xb3d4d467u, 0x5fa2a2fdu, 0x45afafeau, 0x239c9cbfu, 0x53a4a4f7u, 0xe4727296u, 0x9bc0c05bu,
    0x75b7b7c2u, 0xe1fdfd1cu, 0x3d9393aeu, 0x4c26266au, 0x6c36365au, 0x7e3f3f41u, 0xf5f7f702u, 0x83cccc4fu,
    0x6834345cu, 0x51a5a5f4u, 0xd1e5e534u, 0xf9f1f108u, 0xe2717193u, 0xabd8d873u, 0x62313153u, 0x2a15153fu,
    0x0804040cu, 0x95c7c752u, 0x46232365u, 0x9dc3c35eu, 0x30181828u, 0x379696a1u, 0x0a05050fu, 0x2f9a9ab5u,
    0x0e070709u, 0x24121236u, 0x1b80809bu, 0xdfe2e23du, 0xcdebeb26u, 0x4e272769u, 0x7fb2b2cdu, 0xea75759fu,
    0x1209091bu, 0x1d83839eu, 0x582c2c74u, 0x341a1a2eu, 0x361b1b2du, 0xdc6e6eb2u, 0xb45a5aeeu, 0x5ba0a0fbu,
    0xa45252f6u, 0x763b3b4du, 0xb7d6d661u, 0x7db3b3ceu, 0x5229297bu, 0xdde3e33eu, 0x5e2f2f71u, 0x13848497u,
    0xa65353f5u, 0xb9d1d168u, 0x00000000u, 0xc1eded2cu, 0x40202060u, 0xe3fcfc1fu, 0x79b1b1c8u, 0xb65b5bedu,
    0xd46a6abeu, 0x8dcbcb46u, 0x67bebed9u, 0x7239394bu, 0x944a4adeu, 0x984c4cd4u, 0xb05858e8u, 0x85cfcf4au,
    0xbbd0d06bu, 0xc5efef2au, 0x4faaaae5u, 0xedfbfb16u, 0x864343c5u, 0x9a4d4dd7u, 0x66333355u, 0x11858594u,
    0x8a4545cfu, 0xe9f9f910u, 0x04020206u, 0xfe7f7f81u, 0xa05050f0u, 0x783c3c44u, 0x259f9fbau, 0x4ba8a8e3u,
    0xa25151f3u, 0x5da3a3feu, 0x804040c0u, 0x058f8f8au, 0x3f9292adu, 0x219d9dbcu, 0x70383848u, 0xf1f5f504u,
    0x63bcbcdfu, 0x77b6b6c1u, 0xafdada75u, 0x42212163u, 0x20101030u, 0xe5ffff1au, 0xfdf3f30eu, 0xbfd2d26du,
    0x81cdcd4cu, 0x180c0c14u, 0x26131335u, 0xc3ecec2fu, 0xbe5f5fe1u, 0x359797a2u, 0x884444ccu, 0x2e171739u,
    0x93c4c457u, 0x55a7a7f2u, 0xfc7e7e82u, 0x7a3d3d47u, 0xc86464acu, 0xba5d5de7u, 0x3219192bu, 0xe6737395u,
    0xc06060a0u, 0x19818198u, 0x9e4f4fd1u, 0xa3dcdc7fu, 0x44222266u, 0x542a2a7eu, 0x3b9090abu, 0x0b888883u,
    0x8c4646cau, 0xc7eeee29u, 0x6bb8b8d3u, 0x2814143cu, 0xa7dede79u, 0xbc5e5ee2u, 0x160b0b1du, 0xaddbdb76u,
    0xdbe0e03bu, 0x64323256u, 0x743a3a4eu, 0x140a0a1eu, 0x924949dbu, 0x0c06060au, 0x4824246cu, 0xb85c5ce4u,
    0x9fc2c25du, 0xbdd3d36eu, 0x43acacefu, 0xc46262a6u, 0x399191a8u, 0x319595a4u, 0xd3e4e437u, 0xf279798bu,
    0xd5e7e732u, 0x8bc8c843u, 0x6e373759u, 0xda6d6db7u, 0x018d8d8cu, 0xb1d5d564u, 0x9c4e4ed2u, 0x49a9a9e0u,
    0xd86c6cb4u, 0xac5656fau, 0xf3f4f407u, 0xcfeaea25u, 0xca6565afu, 0xf47a7a8eu, 0x47aeaee9u, 0x10080818u,
    0x6fbabad5u, 0xf0787888u, 0x4a25256fu, 0x5c2e2e72u, 0x381c1c24u, 0x57a6a6f1u, 0x73b4b4c7u, 0x97c6c651u,
    0xcbe8e823u, 0xa1dddd7cu, 0xe874749cu, 0x3e1f1f21u, 0x964b4bddu, 0x61bdbddcu, 0x0d8b8b86u, 0x0f8a8a85u,
    0xe0707090u, 0x7c3e3e42u, 0x71b5b5c4u, 0xcc6666aau, 0x904848d8u, 0x06030305u, 0xf7f6f601u, 0x1c0e0e12u,
    0xc26161a3u, 0x6a35355fu, 0xae5757f9u, 0x69b9b9d0u, 0x17868691u, 0x99c1c158u, 0x3a1d1d27u, 0x279e9eb9u,
    0xd9e1e138u, 0xebf8f813u, 0x2b9898b3u, 0x22111133u, 0xd26969bbu, 0xa9d9d970u, 0x078e8e89u, 0x339494a7u,
    0x2d9b9bb6u, 0x3c1e1e22u, 0x15878792u, 0xc9e9e920u, 0x87cece49u, 0xaa5555ffu, 0x50282878u, 0xa5dfdf7au,
    0x038c8c8fu, 0x59a1a1f8u, 0x09898980u, 0x1a0d0d17u, 0x65bfbfdau, 0xd7e6e631u, 0x844242c6u, 0xd06868b8u,
    0x824141c3u, 0x299999b0u, 0x5a2d2d77u, 0x1e0f0f11u, 0x7bb0b0cbu, 0xa85454fcu, 0x6dbbbbd6u, 0x2c16163au,
).asIntArray()
private val te1 = uintArrayOf(
    0xa5c66363u, 0x84f87c7cu, 0x99ee7777u, 0x8df67b7bu, 0x0dfff2f2u, 0xbdd66b6bu, 0xb1de6f6fu, 0x5491c5c5u,
    0x50603030u, 0x03020101u, 0xa9ce6767u, 0x7d562b2bu, 0x19e7fefeu, 0x62b5d7d7u, 0xe64dababu, 0x9aec7676u,
    0x458fcacau, 0x9d1f8282u, 0x4089c9c9u, 0x87fa7d7du, 0x15effafau, 0xebb25959u, 0xc98e4747u, 0x0bfbf0f0u,
    0xec41adadu, 0x67b3d4d4u, 0xfd5fa2a2u, 0xea45afafu, 0xbf239c9cu, 0xf753a4a4u, 0x96e47272u, 0x5b9bc0c0u,
    0xc275b7b7u, 0x1ce1fdfdu, 0xae3d9393u, 0x6a4c2626u, 0x5a6c3636u, 0x417e3f3fu, 0x02f5f7f7u, 0x4f83ccccu,
    0x5c683434u, 0xf451a5a5u, 0x34d1e5e5u, 0x08f9f1f1u, 0x93e27171u, 0x73abd8d8u, 0x53623131u, 0x3f2a1515u,
    0x0c080404u, 0x5295c7c7u, 0x65462323u, 0x5e9dc3c3u, 0x28301818u, 0xa1379696u, 0x0f0a0505u, 0xb52f9a9au,
    0x090e0707u, 0x36241212u, 0x9b1b8080u, 0x3ddfe2e2u, 0x26cdebebu, 0x694e2727u, 0xcd7fb2b2u, 0x9fea7575u,
    0x1b120909u, 0x9e1d8383u, 0x74582c2cu, 0x2e341a1au, 0x2d361b1bu, 0xb2dc6e6eu, 0xeeb45a5au, 0xfb5ba0a0u,
    0xf6a45252u, 0x4d763b3bu, 0x61b7d6d6u, 0xce7db3b3u, 0x7b522929u, 0x3edde3e3u, 0x715e2f2fu, 0x97138484u,
    0xf5a65353u, 0x68b9d1d1u, 0x00000000u, 0x2cc1ededu, 0x60402020u, 0x1fe3fcfcu, 0xc879b1b1u, 0xedb65b5bu,
    0xbed46a6au, 0x468dcbcbu, 0xd967bebeu, 0x4b723939u, 0xde944a4au, 0xd4984c4cu, 0xe8b05858u, 0x4a85cfcfu,
    0x6bbbd0d0u, 0x2ac5efefu, 0xe54faaaau, 0x16edfbfbu, 0xc5864343u, 0xd79a4d4du, 0x55663333u, 0x94118585u,
    0xcf8a4545u, 0x10e9f9f9u, 0x06040202u, 0x81fe7f7fu, 0xf0a05050u, 0x44783c3cu, 0xba259f9fu, 0xe34ba8a8u,
    0xf3a25151u, 0xfe5da3a3u, 0xc0804040u, 0x8a058f8fu, 0xad3f9292u, 0xbc219d9du, 0x48703838u, 0x04f1f5f5u,
    0xdf63bcbcu, 0xc177b6b6u, 0x75afdadau, 0x63422121u, 0x30201010u, 0x1ae5ffffu, 0x0efdf3f3u, 0x6dbfd2d2u,
    0x4c81cdcdu, 0x14180c0cu, 0x35261313u, 0x2fc3ececu, 0xe1be5f5fu, 0xa2359797u, 0xcc884444u, 0x392e1717u,
    0x5793c4c4u, 0xf255a7a7u, 0x82fc7e7eu, 0x477a3d3du, 0xacc86464u, 0xe7ba5d5du, 0x2b321919u, 0x95e67373u,
    0xa0c06060u, 0x98198181u, 0xd19e4f4fu, 0x7fa3dcdcu, 0x66442222u, 0x7e542a2au, 0xab3b9090u, 0x830b8888u,
    0xca8c4646u, 0x29c7eeeeu, 0xd36bb8b8u, 0x3c281414u, 0x79a7dedeu, 0xe2bc5e5eu, 0x1d160b0bu, 0x76addbdbu,
    0x3bdbe0e0u, 0x56643232u, 0x4e743a3au, 0x1e140a0au, 0xdb924949u, 0x0a0c0606u, 0x6c482424u, 0xe4b85c5cu,
    0x5d9fc2c2u, 0x6ebdd3d3u, 0xef43acacu, 0xa6c46262u, 0xa8399191u, 0xa4319595u, 0x37d3e4e4u, 0x8bf27979u,
    0x32d5e7e7u, 0x438bc8c8u, 0x596e3737u, 0xb7da6d6du, 0x8c018d8du, 0x64b1d5d5u, 0xd29c4e4eu, 0xe049a9a9u,
    0xb4d86c6cu, 0xfaac5656u, 0x07f3f4f4u, 0x25cfeaeau, 0xafca6565u, 0x8ef47a7au, 0xe947aeaeu, 0x18100808u,
    0xd56fbabau, 0x88f07878u, 0x6f4a2525u, 0x725c2e2eu, 0x24381c1cu, 0xf157a6a6u, 0xc773b4b4u, 0x5197c6c6u,
    0x23cbe8e8u, 0x7ca1ddddu, 0x9ce87474u, 0x213e1f1fu, 0xdd964b4bu, 0xdc61bdbdu, 0x860d8b8bu, 0x850f8a8au,
    0x90e07070u, 0x427c3e3eu, 0xc471b5b5u, 0xaacc6666u, 0xd8904848u, 0x05060303u, 0x01f7f6f6u, 0x121c0e0eu,
    0xa3c26161u, 0x5f6a3535u, 0xf9ae5757u, 0xd069b9b9u, 0x91178686u, 0x5899c1c1u, 0x273a1d1du, 0xb9279e9eu,
    0x38d9e1e1u, 0x13ebf8f8u, 0xb32b9898u, 0x33221111u, 0xbbd26969u, 0x70a9d9d9u, 0x89078e8eu, 0xa7339494u,
    0xb62d9b9bu, 0x223c1e1eu, 0x92158787u, 0x20c9e9e9u, 0x4987ceceu, 0xffaa5555u, 0x78502828u, 0x7aa5dfdfu,
    0x8f038c8cu, 0xf859a1a1u, 0x80098989u, 0x171a0d0du, 0xda65bfbfu, 0x31d7e6e6u, 0xc6844242u, 0xb8d06868u,
    0xc3824141u, 0xb0299999u, 0x775a2d2du, 0x111e0f0fu, 0xcb7bb0b0u, 0xfca85454u, 0xd66dbbbbu, 0x3a2c1616u,
).asIntArray()
private val te2 = uintArrayOf(
    0x63a5c663u, 0x7c84f87cu, 0x7799ee77u, 0x7b8df67bu, 0xf20dfff2u, 0x6bbdd66bu, 0x6fb1de6fu, 0xc55491c5u,
    0x30506030u, 0x01030201u, 0x67a9ce67u, 0x2b7d562bu, 0xfe19e7feu, 0xd762b5d7u, 0xabe64dabu, 0x769aec76u,
    0xca458fcau, 0x829d1f82u, 0xc94089c9u, 0x7d87fa7du, 0xfa15effau, 0x59ebb259u, 0x47c98e47u, 0xf00bfbf0u,
    0xadec41adu, 0xd467b3d4u, 0xa2fd5fa2u, 0xafea45afu, 0x9cbf239cu, 0xa4f753a4u, 0x7296e472u, 0xc05b9bc0u,
    0xb7c275b7u, 0xfd1ce1fdu, 0x93ae3d93u, 0x266a4c26u, 0x365a6c36u, 0x3f417e3fu, 0xf702f5f7u, 0xcc4f83ccu,
    0x345c6834u, 0xa5f451a5u, 0xe534d1e5u, 0xf108f9f1u, 0x7193e271u, 0xd873abd8u, 0x31536231u, 0x153f2a15u,
    0x040c0804u, 0xc75295c7u, 0x23654623u, 0xc35e9dc3u, 0x18283018u, 0x96a13796u, 0x050f0a05u, 0x9ab52f9au,
    0x07090e07u, 0x12362412u, 0x809b1b80u, 0xe23ddfe2u, 0xeb26cdebu, 0x27694e27u, 0xb2cd7fb2u, 0x759fea75u,
    0x091b1209u, 0x839e1d83u, 0x2c74582cu, 0x1a2e341au, 0x1b2d361bu, 0x6eb2dc6eu, 0x5aeeb45au, 0xa0fb5ba0u,
    0x52f6a452u, 0x3b4d763bu, 0xd661b7d6u, 0xb3ce7db3u, 0x297b5229u, 0xe33edde3u, 0x2f715e2fu, 0x84971384u,
    0x53f5a653u, 0xd168b9d1u, 0x00000000u, 0xed2cc1edu, 0x20604020u, 0xfc1fe3fcu, 0xb1c879b1u, 0x5bedb65bu,
    0x6abed46au, 0xcb468dcbu, 0xbed967beu, 0x394b7239u, 0x4ade944au, 0x4cd4984cu, 0x58e8b058u, 0xcf4a85cfu,
    0xd06bbbd0u, 0xef2ac5efu, 0xaae54faau, 0xfb16edfbu, 0x43c58643u, 0x4dd79a4du, 0x33556633u, 0x85941185u,
    0x45cf8a45u, 0xf910e9f9u, 0x02060402u, 0x7f81fe7fu, 0x50f0a050u, 0x3c44783cu, 0x9fba259fu, 0xa8e34ba8u,
    0x51f3a251u, 0xa3fe5da3u, 0x40c08040u, 0x8f8a058fu, 0x92ad3f92u, 0x9dbc219du, 0x38487038u, 0xf504f1f5u,
    0xbcdf63bcu, 0xb6c177b6u, 0xda75afdau, 0x21634221u, 0x10302010u, 0xff1ae5ffu, 0xf30efdf3u, 0xd26dbfd2u,
    0xcd4c81cdu, 0x0c14180cu, 0x13352613u, 0xec2fc3ecu, 0x5fe1be5fu, 0x97a23597u, 0x44cc8844u, 0x17392e17u,
    0xc45793c4u, 0xa7f255a7u, 0x7e82fc7eu, 0x3d477a3du, 0x64acc864u, 0x5de7ba5du, 0x192b3219u, 0x7395e673u,
    0x60a0c060u, 0x81981981u, 0x4fd19e4fu, 0xdc7fa3dcu, 0x22664422u, 0x2a7e542au, 0x90ab3b90u, 0x88830b88u,
    0x46ca8c46u, 0xee29c7eeu, 0xb8d36bb8u, 0x143c2814u, 0xde79a7deu, 0x5ee2bc5eu, 0x0b1d160bu, 0xdb76addbu,
    0xe03bdbe0u, 0x32566432u, 0x3a4e743au, 0x0a1e140au, 0x49db9249u, 0x060a0c06u, 0x246c4824u, 0x5ce4b85cu,
    0xc25d9fc2u, 0xd36ebdd3u, 0xacef43acu, 0x62a6c462u, 0x91a83991u, 0x95a43195u, 0xe437d3e4u, 0x798bf279u,
    0xe732d5e7u, 0xc8438bc8u, 0x37596e37u, 0x6db7da6du, 0x8d8c018du, 0xd564b1d5u, 0x4ed29c4eu, 0xa9e049a9u,
    0x6cb4d86cu, 0x56faac56u, 0xf407f3f4u, 0xea25cfeau, 0x65afca65u, 0x7a8ef47au, 0xaee947aeu, 0x08181008u,
    0xbad56fbau, 0x7888f078u, 0x256f4a25u, 0x2e725c2eu, 0x1c24381cu, 0xa6f157a6u, 0xb4c773b4u, 0xc65197c6u,
    0xe823cbe8u, 0xdd7ca1ddu, 0x749ce874u, 0x1f213e1fu, 0x4bdd964bu, 0xbddc61bdu, 0x8b860d8bu, 0x8a850f8au,
    0x7090e070u, 0x3e427c3eu, 0xb5c471b5u, 0x66aacc66u, 0x48d89048u, 0x03050603u, 0xf601f7f6u, 0x0e121c0eu,
    0x61a3c261u, 0x355f6a35u, 0x57f9ae57u, 0xb9d069b9u, 0x86911786u, 0xc15899c1u, 0x1d273a1du, 0x9eb9279eu,
    0xe138d9e1u, 0xf813ebf8u, 0x98b32b98u, 0x11332211u, 0x69bbd269u, 0xd970a9d9u, 0x8e89078eu, 0x94a73394u,
    0x9bb62d9bu, 0x1e223c1eu, 0x87921587u, 0xe920c9e9u, 0xce4987ceu, 0x55ffaa55u, 0x28785028u, 0xdf7aa5dfu,
    0x8c8f038cu, 0xa1f859a1u, 0x89800989u, 0x0d171a0du, 0xbfda65bfu, 0xe631d7e6u, 0x42c68442u, 0x68b8d068u,
    0x41c38241u, 0x99b02999u, 0x2d775a2du, 0x0f111e0fu, 0xb0cb7bb0u, 0x54fca854u, 0xbbd66dbbu, 0x163a2c16u,
).asIntArray()
private val te3 = uintArrayOf(
    0x6363a5c6u, 0x7c7c84f8u, 0x777799eeu, 0x7b7b8df6u, 0xf2f20dffu, 0x6b6bbdd6u, 0x6f6fb1deu, 0xc5c55491u,
    0x30305060u, 0x01010302u, 0x6767a9ceu, 0x2b2b7d56u, 0xfefe19e7u, 0xd7d762b5u, 0xababe64du, 0x76769aecu,
    0xcaca458fu, 0x82829d1fu, 0xc9c94089u, 0x7d7d87fau, 0xfafa15efu, 0x5959ebb2u, 0x4747c98eu, 0xf0f00bfbu,
    0xadadec41u, 0xd4d467b3u, 0xa2a2fd5fu, 0xafafea45u, 0x9c9cbf23u, 0xa4a4f753u, 0x727296e4u, 0xc0c05b9bu,
    0xb7b7c275u, 0xfdfd1ce1u, 0x9393ae3du, 0x26266a4cu, 0x36365a6cu, 0x3f3f417eu, 0xf7f702f5u, 0xcccc4f83u,
    0x34345c68u, 0xa5a5f451u, 0xe5e534d1u, 0xf1f108f9u, 0x717193e2u, 0xd8d873abu, 0x31315362u, 0x15153f2au,
    0x04040c08u, 0xc7c75295u, 0x23236546u, 0xc3c35e9du, 0x18182830u, 0x9696a137u, 0x05050f0au, 0x9a9ab52fu,
    0x0707090eu, 0x12123624u, 0x80809b1bu, 0xe2e23ddfu, 0xebeb26cdu, 0x2727694eu, 0xb2b2cd7fu, 0x75759feau,
    0x09091b12u, 0x83839e1du, 0x2c2c7458u, 0x1a1a2e34u, 0x1b1b2d36u, 0x6e6eb2dcu, 0x5a5aeeb4u, 0xa0a0fb5bu,
    0x5252f6a4u, 0x3b3b4d76u, 0xd6d661b7u, 0xb3b3ce7du, 0x29297b52u, 0xe3e33eddu, 0x2f2f715eu, 0x84849713u,
    0x5353f5a6u, 0xd1d168b9u, 0x00000000u, 0xeded2cc1u, 0x20206040u, 0xfcfc1fe3u, 0xb1b1c879u, 0x5b5bedb6u,
    0x6a6abed4u, 0xcbcb468du, 0xbebed967u, 0x39394b72u, 0x4a4ade94u, 0x4c4cd498u, 0x5858e8b0u, 0xcfcf4a85u,
    0xd0d06bbbu, 0xefef2ac5u, 0xaaaae54fu, 0xfbfb16edu, 0x4343c586u, 0x4d4dd79au, 0x33335566u, 0x85859411u,
    0x4545cf8au, 0xf9f910e9u, 0x02020604u, 0x7f7f81feu, 0x5050f0a0u, 0x3c3c4478u, 0x9f9fba25u, 0xa8a8e34bu,
    0x5151f3a2u, 0xa3a3fe5du, 0x4040c080u, 0x8f8f8a05u, 0x9292ad3fu, 0x9d9dbc21u, 0x38384870u, 0xf5f504f1u,
    0xbcbcdf63u, 0xb6b6c177u, 0xdada75afu, 0x21216342u, 0x10103020u, 0xffff1ae5u, 0xf3f30efdu, 0xd2d26dbfu,
    0xcdcd4c81u, 0x0c0c1418u, 0x13133526u, 0xecec2fc3u, 0x5f5fe1beu, 0x9797a235u, 0x4444cc88u, 0x1717392eu,
    0xc4c45793u, 0xa7a7f255u, 0x7e7e82fcu, 0x3d3d477au, 0x6464acc8u, 0x5d5de7bau, 0x19192b32u, 0x737395e6u,
    0x6060a0c0u, 0x81819819u, 0x4f4fd19eu, 0xdcdc7fa3u, 0x22226644u, 0x2a2a7e54u, 0x9090ab3bu, 0x8888830bu,
    0x4646ca8cu, 0xeeee29c7u, 0xb8b8d36bu, 0x14143c28u, 0xdede79a7u, 0x5e5ee2bcu, 0x0b0b1d16u, 0xdbdb76adu,
    0xe0e03bdbu, 0x32325664u, 0x3a3a4e74u, 0x0a0a1e14u, 0x4949db92u, 0x06060a0cu, 0x24246c48u, 0x5c5ce4b8u,
    0xc2c25d9fu, 0xd3d36ebdu, 0xacacef43u, 0x6262a6c4u, 0x9191a839u, 0x9595a431u, 0xe4e437d3u, 0x79798bf2u,
    0xe7e732d5u, 0xc8c8438bu, 0x3737596eu, 0x6d6db7dau, 0x8d8d8c01u, 0xd5d564b1u, 0x4e4ed29cu, 0xa9a9e049u,
    0x6c6cb4d8u, 0x5656faacu, 0xf4f407f3u, 0xeaea25cfu, 0x6565afcau, 0x7a7a8ef4u, 0xaeaee947u, 0x08081810u,
    0xbabad56fu, 0x787888f0u, 0x25256f4au, 0x2e2e725cu, 0x1c1c2438u, 0xa6a6f157u, 0xb4b4c773u, 0xc6c65197u,
    0xe8e823cbu, 0xdddd7ca1u, 0x74749ce8u, 0x1f1f213eu, 0x4b4bdd96u, 0xbdbddc61u, 0x8b8b860du, 0x8a8a850fu,
    0x707090e0u, 0x3e3e427cu, 0xb5b5c471u, 0x6666aaccu, 0x4848d890u, 0x03030506u, 0xf6f601f7u, 0x0e0e121cu,
    0x6161a3c2u, 0x35355f6au, 0x5757f9aeu, 0xb9b9d069u, 0x86869117u, 0xc1c15899u, 0x1d1d273au, 0x9e9eb927u,
    0xe1e138d9u, 0xf8f813ebu, 0x9898b32bu, 0x11113322u, 0x6969bbd2u, 0xd9d970a9u, 0x8e8e8907u, 0x9494a733u,
    0x9b9bb62du, 0x1e1e223cu, 0x87879215u, 0xe9e920c9u, 0xcece4987u, 0x5555ffaau, 0x28287850u, 0xdfdf7aa5u,
    0x8c8c8f03u, 0xa1a1f859u, 0x89898009u, 0x0d0d171au, 0xbfbfda65u, 0xe6e631d7u, 0x4242c684u, 0x6868b8d0u,
    0x4141c382u, 0x9999b029u, 0x2d2d775au, 0x0f0f111eu, 0xb0b0cb7bu, 0x5454fca8u, 0xbbbbd66du, 0x16163a2cu,
).asIntArray()

private fun subw(w: Int): Int {
    var r = (SBOX0[w ushr 24].toInt() and 0xFF) shl 24
    r = r or (SBOX0[w ushr 16 and 0xFF].toInt() and 0xFF shl 16)
    r = r or (SBOX0[w ushr 8 and 0xFF].toInt() and 0xFF shl 8)
    r = r or (SBOX0[w and 0xFF].toInt() and 0xFF)
    return r
}

private fun rotw(w: Int): Int =
    (w shl 8) or (w ushr 24)

internal fun aesExpandKey(
    key: ByteArray,
    encrypt: IntArray,
    decrypt: IntArray
) {
    // Encryption key setup.
    val nk = key.size / 4
    for (i in 0 until nk) {
        encrypt[i] = key.loadIntAt(4 * i)
    }

    for (i in nk until encrypt.size) {
        var t = encrypt[i - 1]
        if (i % nk == 0) {
            val rotw = rotw(t)
            val subw = subw(rotw)
            t = subw xor ((POWX[i / nk - 1].toInt() and 0xFF) shl 24)
        } else if (nk > 6 && i % nk == 4) {
            t = subw(t)
        }
        encrypt[i] = encrypt[i - nk] xor t
    }

    if (decrypt.isEmpty()) return

    val n = encrypt.size
    for (i in 0 until n step 4) {
        val ei = n - i - 4
        for (j in 0 until 4) {
            var x = encrypt[ei + j]
            if (i > 0 && i + 4 < n) {
                x = TD0[SBOX0[x ushr 24].toInt() and 0xFF] xor
                        TD1[SBOX0[x ushr 16 and 0xFF].toInt() and 0xFF] xor
                        TD2[SBOX0[x ushr 8 and 0xFF].toInt() and 0xFF] xor
                        TD3[SBOX0[x and 0xFF].toInt() and 0xFF]
            }
            decrypt[i + j] = x
        }
    }
}

internal fun aesEncryptBlock(
    expandKey: IntArray,
    source: ByteArray,
    sourceOffset: Int,
    destination: ByteArray,
    destinationOffset: Int,
) {
    var s0 = source.loadIntAt(sourceOffset)
    var s1 = source.loadIntAt(sourceOffset + 4)
    var s2 = source.loadIntAt(sourceOffset + 8)
    var s3 = source.loadIntAt(sourceOffset + 12)

    // First round just XORs input with key.
    s0 = s0 xor expandKey[0]
    s1 = s1 xor expandKey[1]
    s2 = s2 xor expandKey[2]
    s3 = s3 xor expandKey[3]

    // Middle rounds shuffle using tables.
    // Number of rounds is set by length of expanded key.
    val nr = expandKey.size / 4 - 2 // - 2: one above, one more below
    var k = 4
    var t0 = 0
    var t1 = 0
    var t2 = 0
    var t3 = 0
    for (r in 0 until nr) {
        t0 =
            expandKey[k + 0] xor te0[(s0 ushr 24) and 0xFF] xor te1[(s1 ushr 16) and 0xFF] xor te2[(s2 ushr 8) and 0xFF] xor te3[s3 and 0xFF]
        t1 =
            expandKey[k + 1] xor te0[(s1 ushr 24) and 0xFF] xor te1[(s2 ushr 16) and 0xFF] xor te2[(s3 ushr 8) and 0xFF] xor te3[s0 and 0xFF]
        t2 =
            expandKey[k + 2] xor te0[(s2 ushr 24) and 0xFF] xor te1[(s3 ushr 16) and 0xFF] xor te2[(s0 ushr 8) and 0xFF] xor te3[s1 and 0xFF]
        t3 =
            expandKey[k + 3] xor te0[(s3 ushr 24) and 0xFF] xor te1[(s0 ushr 16) and 0xFF] xor te2[(s1 ushr 8) and 0xFF] xor te3[s2 and 0xFF]
        k += 4
        s0 = t0
        s1 = t1
        s2 = t2
        s3 = t3
    }

    s0 =
        (SBOX0[(t0 ushr 24)].toInt() and 0xFF shl 24) or (SBOX0[(t1 ushr 16) and 0xFF].toInt() and 0xFF shl 16) or (SBOX0[(t2 ushr 8) and 0xFF].toInt() and 0xFF shl 8) or (SBOX0[t3 and 0xFF].toInt() and 0xFF)
    s1 =
        (SBOX0[(t1 ushr 24)].toInt() and 0xFF shl 24) or (SBOX0[(t2 ushr 16) and 0xFF].toInt() and 0xFF shl 16) or (SBOX0[(t3 ushr 8) and 0xFF].toInt() and 0xFF shl 8) or (SBOX0[t0 and 0xFF].toInt() and 0xFF)
    s2 =
        (SBOX0[(t2 ushr 24)].toInt() and 0xFF shl 24) or (SBOX0[(t3 ushr 16) and 0xFF].toInt() and 0xFF shl 16) or (SBOX0[(t0 ushr 8) and 0xFF].toInt() and 0xFF shl 8) or (SBOX0[t1 and 0xFF].toInt() and 0xFF)
    s3 =
        (SBOX0[(t3 ushr 24)].toInt() and 0xFF shl 24) or (SBOX0[(t0 ushr 16) and 0xFF].toInt() and 0xFF shl 16) or (SBOX0[(t1 ushr 8) and 0xFF].toInt() and 0xFF shl 8) or (SBOX0[t2 and 0xFF].toInt() and 0xFF)

    s0 = s0 xor expandKey[k + 0]
    s1 = s1 xor expandKey[k + 1]
    s2 = s2 xor expandKey[k + 2]
    s3 = s3 xor expandKey[k + 3]

    destination.storeIntAt(destinationOffset + 0, s0)
    destination.storeIntAt(destinationOffset + 4, s1)
    destination.storeIntAt(destinationOffset + 8, s2)
    destination.storeIntAt(destinationOffset + 12, s3)
}
